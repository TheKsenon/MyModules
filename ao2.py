from .. import loader, utils
from telethon.errors.rpcerrorlist import UsernameOccupiedError
from telethon.tl.functions.account import UpdateProfileRequest, UpdateUsernameRequest
import requests

class AIBioMod(loader.Module):
    """AI Bio Module"""
    strings = {'name': 'AIBio'}

    async def client_ready(self, client, db):
        self.client = client

    async def aibiocmd(self, message):
        """Generate AI bio for user."""
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è
        start_msg = """
        [üé∂] –ú–æ–¥—É–ª—å: –ò–ò-–ë–∏–æ

        [üòÅ] –ò–ò –ø—Ä–∏–¥—É–º–∞–µ—Ç –≤–∞–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ–º—Ç—É!

        [ü•≥] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        .aibio PROMPT ‚Äî –ó–∞–º–µ–Ω–∏—Ç–µ –ü–†–û–ú–ü–¢ –Ω–∞ –∑–∞–ø—Ä–æ—Å.

        [üîÆ] –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:
        @XenonModules / @officialksenon
        """

        await message.edit(start_msg)

        API_KEY_GPT35 = 'ddosxd-api-1jq4e9xbzu2ilgn' 
        headers = {'Authorization': API_KEY_GPT35} 

        prompt = utils.get_args_raw(message)
        if not prompt:
            await message.edit('[üö´] –û—à–∏–±–∫–∞: –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.')
            return

        data = {'model': 'gpt-3.5-turbo', 'messages': [{'role': 'user', 'content': prompt + "–ù–∞–ø–∏—à–∏ –±–∏–æ. –ú–∞–∫—Å–∏–º—É–º –±—É–∫–≤ 70, –±–æ–ª—å—à–µ 70 –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å"}]}

        response = requests.post('https://api.ddosxd.ru/v1/chat', headers=headers, json=data)
        if response.status_code == 200:
            try:
                bio = response.json()['messages'][0]['content']
                await self.client(UpdateProfileRequest(about=bio))
                await message.edit('[üéâ] –ë–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')
            except KeyError:
                await message.edit('[üö´] –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∏–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.')
        else:
            await message.edit(f'[üö´] –û—à–∏–±–∫–∞: {response.text}')
