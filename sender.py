from telethon import functions, types
from telethon.errors.rpcerrorlist import PeerIdInvalidError
from .. import loader


@loader.tds
class MessengerModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã, –∫–∞–Ω–∞–ª—ã –∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —é–∑–µ—Ä–Ω–µ–π–º—É."""

    strings = {"name": "–ú–µ—Å—Å–µ–Ω–¥–∂-–ú–æ–¥—É–ª—å"}

    async def client_ready(self, client, db):
        self.client = client

    async def send_cmd(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —é–∑–µ—Ä–Ω–µ–π–º—É, —á–∞—Ç—É –∏–ª–∏ –∫–∞–Ω–∞–ª—É. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @XenonModules / @officialksenon"""
        args = message.text.split(" ", 2)
        if len(args) < 3:
            await message.edit("[üö´] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .send @USERNAME/CHAT_ID MESSAGE")
            return
        username_or_chat_id = args[1]
        text = args[2]
        try:
            entity = await self.client.get_entity(username_or_chat_id)
            if isinstance(entity, (types.User, types.Chat, types.Channel)):
                await self.client.send_message(entity, text)
                await message.edit(f"[‚úÖ] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {username_or_chat_id}")
            else:
                await message.edit("[üö´] –£–∫–∞–∑–∞–Ω–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID —á–∞—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á–∞—Ç–æ–º –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–º.")
        except PeerIdInvalidError:
            await message.edit("[üö´] –¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
